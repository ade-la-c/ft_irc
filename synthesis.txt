FT_IRC
Internet Relay Chat

The project asks us to make a IRC server which is able to communicate with a client

The project is in C++ 98 and the use of some external C functions (listed below) is authorized

External authorized functions :


SOCKET : <sys/socket.h>

	int		socket( int domain, int type, int protocol );

		domain : specifies the domain where the communication will take place (defines).
		type : specifies the semantics of communication (defines).
		protocol : there is usually one default protocol in each type, but the protocol number
			is particular to the communication domain (check the man for more details).

	Socket() creates an endpoint for communication and returns a descriptor (int).
	The function returns -1 if there is an error


GETSOCKOPT : <sys/socket.h>

	int		getsockopt( int socket, int level, int option_name, void *restrict option_value,
						socklen_t *restrict option_len );

		socket : the descriptor of the socket used 						(?)
		level : the level at which the option manipulated resides, to manipulate socket level options,
		the level is specified as SOL_SOCKET
		option_name : the defined name of different options in the library (check the man).
		option_value : most socket-level options use an int in this parameter as a boolean.

	Getsockopt() examines the options associated with a socket, options may exist at multiple
	protocol levels; they're always present at the uppermost "socket" level.
	The function returns 0 if successful completion, -1 if there is an error.


GETSOCKNAME : <sys/socket.h>

	int		getsockname( int socket, struct sockaddr *restrict address,
						socklen_t *restrict address_len );

		socket : the descriptor of the socket used 						(?)
		address : 
		address_len : amount of space pointed by address.

	Getsockname() returns the current address for the specified socket.
	The function returns 0 if successful completion, -1 if there is an error.


GETPROTOBYNAME : <netdb.h>

	struct protoent *	getprotobyname( const char * name );

		name : protocol name

	Getprotobyname() returns a pointer to a structure containing the fields of a line in the
	network protocol data base (etc/protocols)...
	struct	protoent {
		char	*p_name;		-> official name of protocol.
		char	**p_aliases;	-> zero-terminated array of alternate names for the protocol.
		int		p_proto;		-> protocol number.
	};
	the function sequentially searchs from the beginning of the file until a matching protocol name is found,
	or until EOF is encountered.
	The function returns a null pointer if EOF encountered or error


GETHOSTBYNAME : <netdb.h>

	struct hostent *	gethostbyname( const char * name );

		name : the name of the host

	Gethostbyname() returns a pointer to a structure describing an internet host referenced by name. This 
	structure contains either the information obtained from the name server, or the fields from a line
	(etc/hosts)...
	struct	hostent {
		char	*h_name;			-> official name of the host.
		char	**h_aliases;		-> null-terminated array of alternate names for the host.
		int		h_addrtype;			-> the type of address being returned, usually AF_INET.
		int		h_length;			-> the length of the address in bytes.
		char	**h_addr_list;		-> null-terminated array of network addresses for the host.
	};


GETADDRINFO : <sys/socket.h> && <netdb.h>

	int		getaddrinfo( const char *restrict nodename, const char *restrict servname,
						const struct addrinfo *restrict hints, struct addrinfo **restrict res );

		nodename : name of the host ?
		servname : name of the service ?
		hints : optional pointer to a struct addrinfo (defined by netdb.h).
		res : pointer to a linked list of one or more addrinfo structures.

	Getaddrinfo() function is used to get a list of IP addresses and port numbers for host and service,
	it is a replacement for gethostbyname() (defined above) and getservbyname() functions. At least one of
	nodename and servname must be non-null.
	The function returns 0 if successful completion, or one of the error codes listed in gai_strerror(3)
	in case of error.


FREEADDRINFO : <sys/socket.h> && <netdb.h>

	void	freeaddrinfo( struct addrinfo *ai );

		ai : addrinfo struct to be freed.

	Freeaddrinfo() releases the dynamically allocated space created by a successful call of getaddrinfo().


BIND : <sys/socket.h>

	int		bind( int socket, const struct sockaddr *address, socklen_t address_len );

		socket : the descriptor of the socket used.
		address : address that will be assigned to the socket.
		address_len : amount of space pointed by address.

	Bind() assigns a name to a unnamed socket.
	The function returns 0 if successful completion, -1 if there is an error.


CONNECT : <sys/types.h> && <sys/socket.h>

	int		connect( int socket, const struct sockaddr *address, socklen_t address_len );

		socket : the descriptor of the socket used.
		address : 
		address_len : amount of space pointed by address.

	Connect() initiates a connection on a socket.
	The function returns 0 if successful completion, -1 if there is an error.


LISTEN : <sys/socket.h>

	int		listen( int socket, int backlog );

		socket : the descriptor of the socket used.
		backlog : defines the maximum length for the queue of pending connections.

	Listen() function listens for connections on a socket.
	The function returns 0 if successful completion, -1 if there is an error.


ACCEPT : <sys/socket.h>

	int		accept( int socket, struct sockaddr *restrict address, socklen_t *restrict address_len );

		socket : the descriptor of the socket used.
		address : is filled in with the address of the connecting entity 
		address_len : amount of space pointed by address.

	Accept() accepts a connection on a socket (returning a new allocated file descriptor for the socket).
	The function returns the (non negative) descriptor for the accepted socket, -1 if there is an error.


HTONS, HTONL, NTOHS, NTOHL : <arpa/inet.h>

	uint16_t	htons( uint16_t hostshort );
	uint32_t	htonl( uint32_t hostlong );
	uint16_t	ntohs( uint16_t hostshort );
	uint32_t	ntohl( uint32_t hostlong );

	Htons() converts host short value to network short value, (16 or 32 bit values).


INET_ADDR : <arpa/inet.h>

	in_addr_t	inet_addr( const char *cp );

		cp : internet standard notation string.

	Inet_addr() interprets a string representating numbers expressed in the Internet standard '.' notation.
	This function returns a struct in_addr.


INET_NTOA : <arpa/inet.h>

	char *	inet_ntoa( struct in_addr in );

		in : Internet address structure.

	Inet_ntoa() takes an internet address structure and returns an ASCII string representing the address
	in '.' notation.


SEND : <sys/socket.h>

	ssize_t		send( int socket, const void *buffer, size_t length, int flags );

		socket : the descriptor of the socket used.
		buffer : message being sended.										(?)
		length : length of the message.
		flags : optional (?) defined flags used in specific cases (check the man).

	Send() is used only when the socket is in a "connected" state.
	This function returns the number of bytes which where sent, -1 in case of locally detected error.


RECV : <sys/socket.h>

	ssize_t		recv( int socket, void *buffer, size_t length, int flags );

		socket : the descriptor of the socket used.
		buffer : message being sended.
		length : length of the message.
		flags : the flag argument is formed by or'ing (|) one or more of defined values (check the man).

	Recv() is used only when the socket is in a "connected" state.
	This funcion returns the number of bytes recieved, -1 if an error occurred. For TCP sockets,
	the return value 0 means that the peer has closed his half side of the connection.

SIGNAL : <signal.h>

	typedef void (*sig_t) (int);
	sig_t	signal( int sig, sig_t func );

		sig : sig argument specifies the defined signal that was recieved (check the man for defines).
		func : allows user to choose an action upon receipt of a signal.

	Signal() is a simplified software signal facility, it's used to send signals between different processes.
	This function returns the previous action on a successful call, or SIG_ERR if there is an error.

LSEEK : <unistd.h>

	off_t	lseek( int fildes, off_t offset, int whence );

		fildes : file descriptor.
		offset : 
		whence : the directive that defines the behavior of the function (check the man for defines).

	Lseek() repositions the offset of the file descriptor to the offset, according to the argument whence.
	This function returns the resulting offset location (in bytes) from the beginning of the file.
	-1 if there is an error.

FSTAT : <sys/stat.h>

	int		fstat( int fildes, struct stat *buf );

		fildes : file descriptor.
		buf : pointer to a stat structure (defined in the man).

	Fstat() function obtains the same information about an open file known by the file descriptor.
	The function returns 0 if successful completion, -1 if there is an error.

FCNTL : <fcntl.h>

	int		fcntl( int fildes, int cmd, ... );

		fildes : file descriptor.
		cmd : cmd can be different defines (man) which affect the behavior of the function.
		... : this function uses variadic arguments (kinda like printf).

	Fcntl() provides control over files via descriptors.
	This function returns a different value depending on cmd argument (man), -1 if there is an error.

POLL : <poll.h>

	int		poll( struct pollfd fds[], nfds_t nfds, int timeout );

		fds[] : array of file descriptors.
		nfds : specifies the size of the fds array.
		timeout : if timeout > 0 it specifies the maximum interval in miliseconds to wait for any fd
				to become ready, if timeout == 0 poll will return without blocking, if timeout is
				negative, the poll blocks indefinetly.

	Poll() is a synchronous I/O multiplexing 
	This function returns the number of descriptors tat are ready for I/O, -1 if there is an error, if
	timeout is reached, 0 is returned, if poll() returns with an error, the fds array will be unmodified.
